import random

from generators.generator import Generator
from maze import Maze
from type_of_cell import TypeOfCell


class BinaryTreeGenerator(Generator):
    """
    Class for maze generator based on the Binary Tree algorithm
    """

    def __init__(self, height: int, width: int) -> None:
        """Initialize the BinaryTreeGenerator with the specified height and width"""
        super().__init__(height, width)

    def generate(self) -> Maze:
        """Generate a maze using the Binary Tree algorithm"""
        self._create_random_grid()
        self._preprocess_grid()

        maze_grid: list[list[str]] = self._get_carved_maze_grid()
        generated_maze: Maze = Maze(self._height, self._width, maze_grid)

        return generated_maze

    def _create_random_grid(self) -> None:
        """Create a random binary grid"""
        random_grid: list[list[int]] = [
            [random.randint(0, 1) for _ in range(self._width)]
            for _ in range(self._height)
        ]

        self._grid: list[list[int]] = random_grid

    def _preprocess_grid(self) -> None:
        """Preprocess the grid before carving the maze"""
        first_row: list[int] = self._grid[0]
        first_row = [0 if cell == 1 else cell for cell in first_row]
        self._grid[0] = first_row

        for i in range(1, self._height):
            self._grid[i][self._width - 1] = 1

    def _get_carved_maze_grid(self) -> list[list[str]]:
        """Carve the maze based on the grid generated by the algorithm"""
        maze_grid: list[list[str]] = [
            [TypeOfCell.WALL.value for _ in range(self._width * 2 + 1)]
            for _ in range(self._height * 2 + 1)
        ]

        for row_idx in range(self._height):
            for col_idx in range(self._width):
                row_offset: int = row_idx * 2 + 1
                col_offset: int = col_idx * 2 + 1
                toss: int = self._grid[row_idx][col_idx]
                maze_grid[row_offset][col_offset] = TypeOfCell.EMPTY.value
                if toss == 0 and col_offset + 2 < self._width * 2:
                    maze_grid[row_offset][col_offset + 1] = TypeOfCell.EMPTY.value
                    maze_grid[row_offset][col_offset + 2] = TypeOfCell.EMPTY.value
                elif toss == 1 and row_offset - 2 >= 0:
                    maze_grid[row_offset - 1][col_offset] = TypeOfCell.EMPTY.value
                    maze_grid[row_offset - 2][col_offset] = TypeOfCell.EMPTY.value

        return maze_grid
